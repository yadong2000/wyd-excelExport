package com.convenient.excel;

import java.util.concurrent.locks.LockSupport;

public class SpiralArray {
    /***
     *
     * @param n
     * @param m
     */
    public static void spiral(int m, int n) {

        int firstArrayIndex = 0;
        int secondArrayIndex = -1;
        int totalNum = n * m;
        int dir = 1;
        int flag = 0;
        int left = m - 2;
        int right = m - 1;
        /////
        int up = n;
        int down = n - 1;
        int[][] spiralArray = new int[m][n];
        for (int i = 1; i <= totalNum; i++) {
            flag++;
            switch (dir) {
                case 1:
                    //右移
                    secondArrayIndex++;
                    if (up == flag) {
                        dir = 2;
                        up -= 2;
                        flag = 0;
                    }
                    break;
                case 2:
                    firstArrayIndex++;
                    if (down == flag) {
                        dir = 3;
                        down -= 2;
                        flag = 0;
                    }
                    break;
                case 3:
                    secondArrayIndex--;
                    if (right == flag) {
                        dir = 4;
                        right -= 2;
                        flag = 0;
                    }
                    break;
                case 4:
                    firstArrayIndex--;
                    if (left == flag) {
                        dir = 1;
                        left -= 2;
                        flag = 0;
                    }
                    break;
            }
            spiralArray[firstArrayIndex][secondArrayIndex] = i;
        }

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                System.out.print(spiralArray[i][j] + "\t");
            }
            System.out.println();
        }
    }

    ///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
    public SpiralArray(int m, int n) {
        int dir = 1;
        int[][] sArray = new int[m][n];
        int up = n;//每个方向上的计算次数
        int down = n - 1;
        /////////
        int right = m - 1;
        int left = m - 2;
        int flag = 0;//计算次数统计标志

        int i = 0;//数组第一个下标
        int j = -1;//数组第二个下标，因为先要+1，所以从-1开始

        for (int k = 1; k <= m * n; k++) {
            switch (dir) {
                case 1:
                    j++;//向右移动
                    flag++;//移动次数
                    if (flag == up) {
                        up -= 2;//计算次数满，使其成为下次将要计算的次数
                        flag = 0;//标志清零
                        dir = 2;//变换方向
                    }
                    break;
                case 2:
                    i++;//下移
                    flag++;
                    if (flag == right) {
                        right -= 2;
                        flag = 0;
                        dir = 3;
                    }
                    break;
                case 3:
                    j--;//左移
                    flag++;
                    if (flag == down) {
                        down -= 2;
                        flag = 0;
                        dir = 4;
                    }
                    break;
                case 4:
                    i--;//上移
                    flag++;
                    if (flag == left) {
                        left -= 2;
                        flag = 0;
                        dir = 1;
                    }
                    break;
                default:
                    break;
            }
            sArray[i][j] = k;//利用K的循环次数，给数组赋值
        }
//打印数组
        for (int a = 0; a < m; a++) {
            for (int b = 0; b < n; b++) {
                System.out.print(sArray[a][b] + "\t");
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
//        SpiralArray sa = new SpiralArray(3, 3);
        System.out.println("-----------------------------------------------");
        spiral(4, 4);
    }


}
